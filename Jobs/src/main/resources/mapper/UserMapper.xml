<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="com.project.jobs.dao.UserDao">
   								
	<!-- 회원가입 -->
	<insert id="createUser" parameterType="User">
		<selectKey keyProperty="idx" resultType="int" order="BEFORE">
			select jobs_user_seq.nextval from dual
		</selectKey>
		insert into jobs_user values(#{idx}, #{userid}, CryptString.encrypt(#{pwd},'key'), #{name}, #{imagename:VARCHAR}, #{info:VARCHAR}, #{state}, sysdate, '')
	</insert>
	
	<!-- 아이디 중복 검사 -->
	<select id="idCheck" resultType="int" parameterType="String">
		select count(*) from jobs_user where userid=#{userid}
	</select>
	
	<!-- 회원정보 수정 -->
	<update id="updateUser" parameterType="User">
		update jobs_user set pwd=CryptString.encrypt(#{pwd},'key'), name=#{name}
		<if test="imagename != null">
		, imagename=#{imagename}
		</if>
		where userid=#{userid}
	</update>
	
	<!-- 로그인 -->
	<select id="getUser" resultType="User" parameterType="string">
		select idx, userid, CryptString.decrypt(pwd, 'key') pwd, name, imagename, info, state, indate, outdate
		from jobs_user where userid=#{userid}
	</select>
		
	<!-- 기업정보 (이름순으로 나열) -->
	<select id="selectCompanyAll" resultType="User" parameterType="map">
		select * from
		(select row_number() over(order by name asc) rn, jobs_user.* 
		from jobs_user where state=1 and (LOWER(name) like LOWER('%'||#{search}||'%') or LOWER(info) like LOWER('%'||#{search}||'%')))
		where rn between #{start} and #{end}
	</select>
	
	<!-- 해당 기업정보 -->
	<select id="selectByNum" parameterType="int" resultType="User">
		select * from jobs_user where idx=#{idx}
	</select>
   
   <!-- 글목록 관련 (게시물 수 가져오기) -->
   <select id="getTotalCount" resultType="int" parameterType="String">
   		select count(idx) from jobs_user where state=1 and
   		(LOWER(name) like LOWER('%'||#{search}||'%') or LOWER(info) like LOWER('%'||#{search}||'%'))
   </select>
   
   <!-- 유저 목록 가져오기 -->
	<select id="getUserlist" resultType="User">
		select idx, userid, CryptString.decrypt(pwd, 'key') pwd, pwd Epwd, name, imagename, info, state, indate, outdate from jobs_user order by idx asc
	</select>
	
	<!-- 회원상태 수정 -->
	<update id="updateState" parameterType="map">
   	update jobs_user set state = #{state}, outdate = '' where idx = #{idx}
   </update>
   
	<!-- 회원 삭제하기(관리자가 직접 삭제함) -->
	<delete id="deleteUser" parameterType="int">
		delete from jobs_user where idx=#{idx}
	</delete>
   
   <!-- 회원탈퇴 관련(회원이 직접 탈퇴함) -->
   <delete id="quitUser" parameterType="int">
		update jobs_user set state = 4, outdate=sysdate where idx = #{idx}
	</delete>
	
</mapper>













